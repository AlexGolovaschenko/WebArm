# Generated by Django 3.1.1 on 2020-10-12 12:04

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Device',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, verbose_name='Наименование устройства')),
                ('polling_period', models.PositiveSmallIntegerField(default=300, verbose_name='Период опроса устройства, сек')),
                ('timeout', models.PositiveSmallIntegerField(default=1500, verbose_name='Таймайут потери связи с устройством, сек')),
            ],
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('device', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='devices.device')),
            ],
        ),
        migrations.CreateModel(
            name='StringValue',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.CharField(blank=True, max_length=200, verbose_name='Строковое значение')),
                ('quality', models.CharField(choices=[('GOOD', 'GOOD'), ('BAD', 'BAD')], default='BAD', max_length=4, verbose_name='Качество')),
                ('tag', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='devices.tag')),
            ],
        ),
        migrations.CreateModel(
            name='ModbusTagParameters',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('data_type', models.CharField(max_length=50)),
                ('register_address', models.PositiveSmallIntegerField()),
                ('read_function', models.CharField(choices=[('1', '1 - Read Coil'), ('2', '2 - Read Discrete Input'), ('3', '3 - Read Holding Registers'), ('4', '4 - Read Input Registers')], default='4', max_length=2)),
                ('write_function', models.CharField(choices=[('5', '5 - Write Single Coil'), ('6', '6 - Write Single Holding Register'), ('15', '15 - Write Multiple Coils'), ('16', '16 - Write Multiple Holding Registers')], default='16', max_length=2)),
                ('lower_byte_forward', models.BooleanField(default=True)),
                ('lower_register_forward', models.BooleanField(default=False)),
                ('tag', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='devices.tag')),
            ],
        ),
        migrations.CreateModel(
            name='ModbusDeviceParameters',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('protocol_type', models.CharField(choices=[('TCP', 'MODBUS-TCP'), ('ASCII', 'MODBUS-ASCII'), ('RTU', 'MODBUS-RTU')], default='RTU', max_length=5, verbose_name='Протокол')),
                ('device_address', models.PositiveSmallIntegerField(default=1, verbose_name='Адрес устройства')),
                ('boudrate', models.PositiveSmallIntegerField(choices=[(28800, '28800'), (19200, '19200'), (57600, '57600'), (38400, '38400'), (300, '300'), (4800, '4800'), (9600, '9600'), (14400, '14400'), (1200, '1200'), (2400, '2400'), (115200, '115200'), (600, '600')], default=9600, verbose_name='Скорость обмена данными')),
                ('address_size', models.CharField(choices=[('8', '8')], default='8', max_length=1, verbose_name='Длинна адреса')),
                ('parity', models.CharField(choices=[('even', 'even'), ('odd', 'odd'), ('none', 'none')], default='none', max_length=4, verbose_name='Контроль четности')),
                ('stopbit', models.CharField(choices=[('1', '1'), ('2', '2')], default='1', max_length=1, verbose_name='Стоп бит')),
                ('bit_timout', models.PositiveSmallIntegerField(default=100, verbose_name='Таймаут бита, мс')),
                ('packet_timout', models.PositiveSmallIntegerField(default=300, verbose_name='Таймаут соединения, мс')),
                ('allow_group_reading', models.BooleanField(default=False, verbose_name='Разрешить груповое чтение')),
                ('device', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='devices.device')),
            ],
        ),
        migrations.CreateModel(
            name='IntValue',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.IntegerField(blank=True, verbose_name='Целочисленное значение')),
                ('quality', models.CharField(choices=[('GOOD', 'GOOD'), ('BAD', 'BAD')], default='BAD', max_length=4, verbose_name='Качество')),
                ('tag', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='devices.tag')),
            ],
        ),
        migrations.CreateModel(
            name='FloatValue',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.FloatField(blank=True, verbose_name='Значение с плавающей запятой')),
                ('quality', models.CharField(choices=[('GOOD', 'GOOD'), ('BAD', 'BAD')], default='BAD', max_length=4, verbose_name='Качество')),
                ('tag', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='devices.tag')),
            ],
        ),
    ]
