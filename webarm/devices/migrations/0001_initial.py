# Generated by Django 4.0.6 on 2022-07-30 07:13

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('facilities', '0001_initial'),
        ('connectors', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Device',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, verbose_name='Наименование устройства')),
                ('polling_period', models.PositiveSmallIntegerField(default=30, verbose_name='Период опроса устройства, сек')),
                ('timeout', models.PositiveSmallIntegerField(default=600, verbose_name='Таймайут потери связи с устройством, сек')),
                ('last_update', models.DateTimeField(blank=True, null=True, verbose_name='Время последнего обновления данных')),
                ('connector', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='connectors.connector', verbose_name='Коннектор')),
                ('facility', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='facilities.facility', verbose_name='Объект')),
            ],
            options={
                'verbose_name': 'Устройство',
                'verbose_name_plural': 'Устройства',
            },
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(max_length=40, verbose_name='Код')),
                ('name', models.CharField(max_length=100, verbose_name='Наименование')),
                ('data_type', models.CharField(choices=[('INT', 'INT'), ('FLOAT', 'FLOAT'), ('STRING', 'STRING'), ('BOOL', 'BOOL')], max_length=20, verbose_name='Тип данных')),
                ('device', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='devices.device', verbose_name='Устройство')),
            ],
            options={
                'verbose_name': 'Тег',
                'verbose_name_plural': 'Теги',
                'unique_together': {('code', 'device')},
            },
        ),
        migrations.CreateModel(
            name='ModbusTagParameters',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('data_type', models.CharField(choices=[('WORD', 'WORD'), ('INT', 'INT'), ('UINT', 'UINT'), ('FLOAT', 'FLOAT'), ('STRING', 'STRING'), ('BOOL', 'BOOL')], max_length=50)),
                ('register_address', models.PositiveSmallIntegerField()),
                ('read_function', models.CharField(choices=[('1', '1 - Read Coil'), ('2', '2 - Read Discrete Input'), ('3', '3 - Read Holding Registers'), ('4', '4 - Read Input Registers')], default='4', max_length=2)),
                ('write_function', models.CharField(choices=[('5', '5 - Write Single Coil'), ('6', '6 - Write Single Holding Register'), ('15', '15 - Write Multiple Coils'), ('16', '16 - Write Multiple Holding Registers')], default='16', max_length=2)),
                ('tag', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='devices.tag')),
            ],
            options={
                'verbose_name': 'Параметры регистра модбас',
                'verbose_name_plural': 'Параметры регистров модбас',
            },
        ),
        migrations.CreateModel(
            name='ModbusDeviceParameters',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('protocol_type', models.CharField(choices=[('RTU', 'MODBUS-RTU'), ('ASCII', 'MODBUS-ASCII'), ('TCP', 'MODBUS-TCP')], default='RTU', max_length=5, verbose_name='Протокол')),
                ('device_address', models.PositiveSmallIntegerField(default=1, verbose_name='Адрес устройства')),
                ('baudrate', models.PositiveIntegerField(choices=[(300, '300'), (600, '600'), (1200, '1200'), (2400, '2400'), (4800, '4800'), (9600, '9600'), (14400, '14400'), (19200, '19200'), (28800, '28800'), (38400, '38400'), (57600, '57600'), (115200, '115200')], default=9600, verbose_name='Скорость обмена данными')),
                ('address_size', models.CharField(choices=[('8', '8')], default='8', max_length=1, verbose_name='Длинна адреса')),
                ('parity', models.CharField(choices=[('none', 'none'), ('odd', 'odd'), ('even', 'even')], default='none', max_length=4, verbose_name='Контроль четности')),
                ('stopbit', models.CharField(choices=[('1', '1'), ('2', '2')], default='1', max_length=1, verbose_name='Стоп бит')),
                ('bit_timout', models.PositiveSmallIntegerField(default=100, verbose_name='Таймаут бита, мс')),
                ('packet_timout', models.PositiveSmallIntegerField(default=300, verbose_name='Таймаут соединения, мс')),
                ('allow_group_reading', models.BooleanField(default=True, verbose_name='Разрешить груповое чтение')),
                ('lower_byte_forward', models.BooleanField(default=True)),
                ('lower_register_forward', models.BooleanField(default=False)),
                ('device', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='devices.device')),
            ],
            options={
                'verbose_name': 'Параметры устройства модбас',
                'verbose_name_plural': 'Параметры устройств модбас',
            },
        ),
        migrations.CreateModel(
            name='HistoricalStringValue',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.CharField(blank=True, max_length=200, verbose_name='STRING-значение')),
                ('quality', models.CharField(choices=[('GOOD', 'GOOD'), ('BAD', 'BAD')], default='BAD', max_length=4, verbose_name='Качество')),
                ('add_date', models.DateTimeField(auto_now_add=True, verbose_name='Дата и время')),
                ('tag', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='devices.tag')),
            ],
            options={
                'verbose_name': 'Архивное STRING-значение тега',
                'verbose_name_plural': 'Архивные STRING-значения тега',
            },
        ),
        migrations.CreateModel(
            name='HistoricalIntValue',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.IntegerField(blank=True, verbose_name='INTEGER-значение')),
                ('quality', models.CharField(choices=[('GOOD', 'GOOD'), ('BAD', 'BAD')], default='BAD', max_length=4, verbose_name='Качество')),
                ('add_date', models.DateTimeField(auto_now_add=True, verbose_name='Дата и время')),
                ('tag', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='devices.tag')),
            ],
            options={
                'verbose_name': 'Архивное INTEGER-значение тега',
                'verbose_name_plural': 'Архивные INTEGER-значения тега',
            },
        ),
        migrations.CreateModel(
            name='HistoricalFloatValue',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.FloatField(blank=True, verbose_name='FLOAT-значение')),
                ('quality', models.CharField(choices=[('GOOD', 'GOOD'), ('BAD', 'BAD')], default='BAD', max_length=4, verbose_name='Качество')),
                ('add_date', models.DateTimeField(auto_now_add=True, verbose_name='Дата и время')),
                ('tag', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='devices.tag')),
            ],
            options={
                'verbose_name': 'Архивное FLOAT-значение тега',
                'verbose_name_plural': 'Архивные FLOAT-значения тега',
            },
        ),
        migrations.CreateModel(
            name='HistoricalBooleanValue',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.BooleanField(blank=True, verbose_name='BOOLEAN-значение')),
                ('quality', models.CharField(choices=[('GOOD', 'GOOD'), ('BAD', 'BAD')], default='BAD', max_length=4, verbose_name='Качество')),
                ('add_date', models.DateTimeField(auto_now_add=True, verbose_name='Дата и время')),
                ('tag', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='devices.tag')),
            ],
            options={
                'verbose_name': 'Архивное BOOLEAN-значение тега',
                'verbose_name_plural': 'Архивные BOOLEAN-значения тега',
            },
        ),
        migrations.CreateModel(
            name='CurrentStringValue',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.CharField(blank=True, max_length=200, verbose_name='STRING-значение')),
                ('quality', models.CharField(choices=[('GOOD', 'GOOD'), ('BAD', 'BAD')], default='BAD', max_length=4, verbose_name='Качество')),
                ('tag', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='devices.tag')),
            ],
            options={
                'verbose_name': 'Текущее STRING-значение тега',
                'verbose_name_plural': 'Текущие STRING-значения тега',
            },
        ),
        migrations.CreateModel(
            name='CurrentIntValue',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.IntegerField(blank=True, verbose_name='INTEGER-значение')),
                ('quality', models.CharField(choices=[('GOOD', 'GOOD'), ('BAD', 'BAD')], default='BAD', max_length=4, verbose_name='Качество')),
                ('tag', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='devices.tag')),
            ],
            options={
                'verbose_name': 'Текущее INTEGER-значение тега',
                'verbose_name_plural': 'Текущие INTEGER-значения тега',
            },
        ),
        migrations.CreateModel(
            name='CurrentFloatValue',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.FloatField(blank=True, verbose_name='FLOAT-значение')),
                ('quality', models.CharField(choices=[('GOOD', 'GOOD'), ('BAD', 'BAD')], default='BAD', max_length=4, verbose_name='Качество')),
                ('tag', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='devices.tag')),
            ],
            options={
                'verbose_name': 'Текущее FLOAT-значение тега',
                'verbose_name_plural': 'Текущие FLOAT-значения тега',
            },
        ),
        migrations.CreateModel(
            name='CurrentBooleanValue',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.BooleanField(blank=True, verbose_name='BOOLEAN-значение')),
                ('quality', models.CharField(choices=[('GOOD', 'GOOD'), ('BAD', 'BAD')], default='BAD', max_length=4, verbose_name='Качество')),
                ('tag', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='devices.tag')),
            ],
            options={
                'verbose_name': 'Текущее BOOLEAN-значение тега',
                'verbose_name_plural': 'Текущие BOOLEAN-значения тега',
            },
        ),
        migrations.AddIndex(
            model_name='historicalstringvalue',
            index=models.Index(fields=['tag', 'add_date'], name='devices_his_tag_id_ad8d6c_idx'),
        ),
        migrations.AddIndex(
            model_name='historicalstringvalue',
            index=models.Index(fields=['add_date'], name='devices_his_add_dat_1386bc_idx'),
        ),
        migrations.AddIndex(
            model_name='historicalintvalue',
            index=models.Index(fields=['tag', 'add_date'], name='devices_his_tag_id_cfa56e_idx'),
        ),
        migrations.AddIndex(
            model_name='historicalintvalue',
            index=models.Index(fields=['add_date'], name='devices_his_add_dat_df4799_idx'),
        ),
        migrations.AddIndex(
            model_name='historicalfloatvalue',
            index=models.Index(fields=['tag', 'add_date'], name='devices_his_tag_id_219a97_idx'),
        ),
        migrations.AddIndex(
            model_name='historicalfloatvalue',
            index=models.Index(fields=['add_date'], name='devices_his_add_dat_53b3dc_idx'),
        ),
        migrations.AddIndex(
            model_name='historicalbooleanvalue',
            index=models.Index(fields=['tag', 'add_date'], name='devices_his_tag_id_73febd_idx'),
        ),
        migrations.AddIndex(
            model_name='historicalbooleanvalue',
            index=models.Index(fields=['add_date'], name='devices_his_add_dat_44be72_idx'),
        ),
    ]
